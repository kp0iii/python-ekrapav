# -*- coding: utf-8 -*-
"""
Задание 12.2


Функция ping_ip_addresses из задания 12.1 принимает только список адресов,
но было бы удобно иметь возможность указывать адреса с помощью диапазона,
например, 192.168.100.1-10.

В этом задании необходимо создать функцию convert_ranges_to_ip_list,
которая конвертирует список IP-адресов в разных форматах в список,
где каждый IP-адрес указан отдельно.

Функция ожидает как аргумент список, в котором содержатся IP-адреса
и/или диапазоны IP-адресов.

Элементы списка могут быть в формате:
* 10.1.1.1
* 10.1.1.1-10.1.1.10
* 10.1.1.1-10

Если адрес указан в виде диапазона, надо развернуть диапазон в отдельные
адреса, включая последний адрес диапазона.
Для упрощения задачи, можно считать, что в диапазоне всегда меняется только
последний октет адреса.

Функция возвращает список IP-адресов.

Например, если передать функции convert_ranges_to_ip_list такой список:
['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']

Функция должна вернуть такой список:
['8.8.4.4', '1.1.1.1', '1.1.1.2', '1.1.1.3', '172.21.41.128',
 '172.21.41.129', '172.21.41.130', '172.21.41.131', '172.21.41.132']

"""

import ipaddress

ip_list = ['8.8.4.4', '1.1.1.1-3', '172.21.41.128-172.21.41.132']


def convert_ranges_to_ip_list(ip_address):
    result = []
    i = 0
    for ip in ip_address:
        if '-' not in ip:
            result.append(ip)
        elif len(ip) - ip.find('-') <= 4:
            ipv4 = ipaddress.ip_address(ip.split('-')[0])
            while int(ip.split('-')[1]) != int(str(ipv4).split('.')[-1])-1:
                result.append(str(ipv4))
                ipv4 += 1
        else:
            ipv4 = ipaddress.ip_address(ip.split('-')[0])
            ipv4_range = ipaddress.ip_address(ip.split('-')[1]) + 1
            while ipv4 != ipv4_range:
                result.append(str(ipv4))
                ipv4 += 1
    return result


if __name__ == "__main__":
    final_result = convert_ranges_to_ip_list(ip_list)
    print(final_result)
